package group_assignment;
/**
 * 
 */

import java.io.Serializable;
import java.util.Random;
 
/**
 * @author Joshua
 *
 */
public class Ninja implements Serializable{
 
	/**
	 * This variable represents the health of the ninja. (Should never really be more than one.)
	 */
	private int health;
	
	/**
	 * This variable is either true or false depending on the current status of the ninja.
	 */
	private boolean alive;
	
	/**
	 * This variable represents the ninja's current position in the room.
	 */
	private int xposition;
	
	private int yposition;
	
	/**
	 * This constructor is used to instantiate the enemy ninja objects. 
	 */
	public Ninja() {
		health = 1;
		alive = true;
		yposition = generatePosition();
		xposition = generatePosition();
	}
	
	/**
	 * This method generates the initial position for the ninja as well as checking whether
	 * the generated position is within 3 squares of the initial player position or another 
	 * ninja. If so, it regenerates the ninja's initial position.
	 * @return Returns the position generated by the method.
	 */
	public int generatePosition() {
		Random iniPos = new Random();
		int positionGenerated = iniPos.nextInt(8);
		return positionGenerated;
	}
	
	/**
	 * This method is used to move the ninja one space in a random direction.
	 */
//	public void randomMove() {
//		Random randDir = new Random();
//		int Dir = randDir.nextInt(3);
//		switch (Dir) {
//		case 0:
//			xposition++;
//			break;
//		case 1:
//			xposition--;
//			break;
//		case 2:
//			yposition++;
//			break;
//		case 3:
//			yposition--;
//			break;
//		}
//	}
	
	public void setPosition(int[] position) {
		xposition = position[0];
		yposition = position[1];
	}
	
	public void moveNinja(int direction){
		
	}
	
	/**
	 * This method is used to kill the ninja when shot by the player character.
	 */
	public void getShot() {
		alive = false;
	}
	
	/**
	 * This method is used to kill the player character when a ninja finds him.
	 * Within the GameEngine, the diImmortale method from the Spy class, passing in
	 * the value as a parameter for the Ninja's stabPlayer(Boolean value) method.
	 */
	public boolean stabPlayer(boolean invincible) {
		if(invincible == false){
			return true;
		}else {
			return false;
		}
	}
	
	/**
	 * This method checks if the player character is within one square of the ninja.
	 */
	public void look(int PlayerPos) {
		
	}
 
	/**
	 * This method returns the ninja's current health.
	 * @return The ninja's health.
	 */
	public boolean getAlive() {
		return alive;
	}
	
	/**
	 * This method returns the ninja's current position.
	 * @param <array>
	 * @return The ninja's position.
	 */
	public int[] getPosition() {
		int[] arrayPos;
		arrayPos = new int[2];
		arrayPos[0] = xposition;
		arrayPos[1] = yposition;
		return arrayPos;
	}
	
}